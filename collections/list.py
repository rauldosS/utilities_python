'''
    â†’ It is a structure of indexed data stored in sequence, where each element has a 
    position that is identified by an index.

    â†’ lists are changeable
    â†’ Are accessible through the index

    â†’ When to use?
        It is recommended to use lists when working with homogeneous structures, that is, 
        when all elements are of the same type (strings, int, float, etc.), and/or when 
        there is a need to change the items in the collection.
'''

# ğŸ’¡ declare
# index       0    1    2    3    4
letters =   ['A', 'B', 'C', 'D', 'E']
l1 =        [1,    2,   3]
l2 =        [4,    5,   6]
# index      5     4    3    2    1

# ğŸ’¡ slicing
print('Index 1:', letters[1])
print('Index 2 to 4: ', letters[2:4])

# ğŸ’¡ append
letters.append('F')

# ğŸ’¡ +
l3 = l1 + l2

# ğŸ’¡ del
del(letters[1])

# ğŸ’¡ insert(index, value)
letters.insert(1, 'B')

# ğŸ’¡ extend
l1.extend(l2)

# ğŸ’¡ pop() - remove last index
letters.pop()

# ğŸ’¡ min(list), max(list)
print( max(letters) )
print( min(letters) )

# ğŸ’¡ range
l2 = list(range(1, 100, 8))
print(l2)

for value in l2:
    print(value)

# ğŸ’¡ clear
letters.clear()

# ğŸ’¡ enumerate(list, first_index) - unpacking a simple list
for index, value in enumerate(letters):
    print(index, value)

people = [
    [0, 'Raul'],
    [1, 'Maria'],
    [2, 'AndrÃ©'],
]

for index, value in people:
    print(index, value)

# ğŸ’¡ unpacking lists
people = ['Raul', 'Maria', 'AndrÃ©', 'Mauro', 'Adriano']

n1, n2, *other_people, last_people = people

print(n1, n2, other_people, last_people)